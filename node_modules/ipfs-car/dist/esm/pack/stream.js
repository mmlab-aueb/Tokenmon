import { Readable } from 'stream';
import last from 'it-last';
import pipe from 'it-pipe';
import { CarWriter } from '@ipld/car';
import { importer } from 'ipfs-unixfs-importer';
// @ts-ignore
import { normaliseInput } from 'ipfs-core-utils/src/files/normalise-input/index.js';
import globSource from 'ipfs-utils/src/files/glob-source.js';
import { MemoryBlockStore } from "../blockstore/memory.js";
import { unixfsImporterOptionsDefault } from "./constants.js";
// Node version of toCar with Node Stream Writable
export async function packToStream({ input, writable, blockstore: userBlockstore, hasher, maxChunkSize, maxChildrenPerNode, wrapWithDirectory }) {
    if (!input || (Array.isArray(input) && !input.length)) {
        throw new Error('given input could not be parsed correctly');
    }
    const blockstore = userBlockstore ? userBlockstore : new MemoryBlockStore();
    // Consume the source
    const rootEntry = await last(pipe(normaliseInput(globSource(input, {
        recursive: true
    })), (source) => importer(source, blockstore, {
        ...unixfsImporterOptionsDefault,
        hasher: hasher || unixfsImporterOptionsDefault.hasher,
        maxChunkSize: maxChunkSize || unixfsImporterOptionsDefault.maxChunkSize,
        maxChildrenPerNode: maxChildrenPerNode || unixfsImporterOptionsDefault.maxChildrenPerNode,
        wrapWithDirectory: wrapWithDirectory === false ? false : unixfsImporterOptionsDefault.wrapWithDirectory
    })));
    if (!rootEntry || !rootEntry.cid) {
        throw new Error('given input could not be parsed correctly');
    }
    const root = rootEntry.cid;
    const { writer, out } = await CarWriter.create([root]);
    Readable.from(out).pipe(writable);
    for await (const block of blockstore.blocks()) {
        await writer.put(block);
    }
    await writer.close();
    if (!userBlockstore) {
        await blockstore.close();
    }
    return { root };
}
